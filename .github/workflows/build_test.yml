name: Build and test

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  pull_request:
    branches:
      - "master"

jobs:

  build_binary:
    name: Build the binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3

      - name: Install UPX
        run: sudo apt-get install -y upx

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: build --snapshot --rm-dist

      - name: Upload the binaries
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*

  #####

  test_binary:
    name: Test the binary
    needs: build_binary
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: linux
            runner: ubuntu-latest
          - os: darwin
            runner: macos-latest
          - os: windows
            runner: windows-latest
    runs-on: ${{ matrix.platform.runner }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Copy the binary to test
        run: |
          cp dist/terraform-graph-beautifier_${{ matrix.platform.os }}_amd64*/terraform-graph-beautifier test/
          chmod +x test/terraform-graph-beautifier

      - name: Get Terraform version from Dockerfile
        run: |
          TERRAFORM_VERSION=$(sed -n 's/^.*TERRAFORM_VERSION=\"\(.*\)\"$/\1/p' test/Dockerfile)
          echo "TERRAFORM_VERSION=${TERRAFORM_VERSION}" >> "${GITHUB_ENV}"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Install the test framework
        working-directory: ./test
        run: npm install

      - name: Run the tests
        working-directory: ./test
        run: npx bats .
        env:
          USE_DOCKER_IMAGE: "false"

  #####

  build_docker_image:
    name: Build the Docker image
    needs: test_binary
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        os:
          - linux
          - darwin
          - windows
    runs-on: ubuntu-latest
    env:
      PLATFORMS: "${{ matrix.os }}/amd64,${{ matrix.os }}/arm64"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Make binaries executable
        run: chmod +x dist/*/terraform-graph-beautifier

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: docker_metadata
        name: Docker metadata
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}  # Will give: ghcr.io/owner/repository
          flavor: |
            latest=auto
            suffix=-${{ matrix.os }},onlatest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Get main image tag
        # Take the first tag and make it available as an environment variable.
        run: echo "DOCKER_IMAGE_TAG=${{ fromJSON(steps.docker_metadata.outputs.json)['tags'][0] }}" >> "${GITHUB_ENV}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          target: binary_from_build_context
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.docker_metadata.outputs.tags }}
          labels: ${{ steps.docker_metadata.outputs.labels }}
          push: true

      - name: Run Trivy vulnerability scanner
        if: ${{ matrix.os == 'linux' }}  # Container scanning only works on linux.
        uses: aquasecurity/trivy-action@0.8.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE_TAG }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          security-checks: "vuln,secret,config"
          severity: "CRITICAL,HIGH"

# TODO: temp for test
#      - name: Install the test framework
#        working-directory: ./test
#        run: npm install
#
#      - name: Test image
#        working-directory: ./test
#        run: npx bats .
#        env:
#          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE_TAG }}
