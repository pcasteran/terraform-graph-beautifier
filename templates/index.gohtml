<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="description" content="Terraform configuration graph">
    <meta name="author" content="https://github.com/pcasteran/terraform-graph-beautifier">

    <title>{{.PageTitle}}</title>

    <script src="https://unpkg.com/cytoscape/dist/cytoscape.min.js"></script>
    <script src="https://unpkg.com/layout-base/layout-base.js"></script>
    <script src="https://unpkg.com/cose-base/cose-base.js"></script>
    <script src="https://unpkg.com/cytoscape-fcose/cytoscape-fcose.js"></script>
    <script src="https://unpkg.com/cytoscape-expand-collapse/cytoscape-expand-collapse.js"></script>

</head>
<style>
    #cy {
        width: 100%;
        height: 95%;
        position: absolute;
        top: 40px;
        left: 0px;
    }
</style>
<body>
<p>
    <b id="collapseAll" style="cursor: pointer;color: darkred">Collapse all</b>
    /
    <b id="expandAll" style="cursor: pointer; color: darkslateblue">Expand all</b>
    -
    <b id="runLayout" style="cursor: pointer; color: #598b3d">Run layout</b>
</p>
<div id="cy"></div>
<script>
    // Helper function used to retrieve the scratchpad data of an element.
    const getScratchPad = function (element) {
        let scratchPad = element.scratch('_tf-graph-beautifier');
        if (!scratchPad) {
            scratchPad = element.scratch('_tf-graph-beautifier', {});
        }
        return scratchPad;
    }

    // Color palette used for the modules background.
    //
    // This is the "8-class Pastel2" palette from ColorBrewer v2.0 (https://colorbrewer2.org/?type=qualitative&scheme=Pastel2&n=8).
    //
    // This palette is covered by a licence, hence here is the related acknowledgments:
    // This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).
    // Please see license at http://colorbrewer.org/export/LICENSE.txt
    const moduleBgColorPalette = ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'];

    // Returns the color index in the `moduleBgColorPalette` for an element.
    const getColorIndex = function (element) {
        let scratchPad = getScratchPad(element);
        let colorIndex = scratchPad["module-bg-color-index"];
        if (colorIndex === undefined) {
            // Get the color index of the parent (if any).
            let parentId = element.data("parentModuleID");
            if (parentId) {
                let parent = element.cy().getElementById(parentId);
                let parentColorIndex = getColorIndex(parent);
                colorIndex = (parentColorIndex + 1) % moduleBgColorPalette.length;
            } else {
                colorIndex = 0;
            }

            scratchPad["module-bg-color-index"] = colorIndex;
        }

        return colorIndex
    }

    // Layout options.
    const layoutOptions = {
        name: 'fcose',
        // 'draft', 'default' or 'proof'
        // - "draft" only applies spectral layout
        // - "default" improves the quality with incremental layout (fast cooling rate)
        // - "proof" improves the quality with incremental layout (slow cooling rate)
        quality: "proof",
        // Use random node positions at beginning of layout
        // if this is set to false, then quality option must be "proof"
        randomize: false,
        // Whether or not to animate the layout
        animate: "end",
        // Duration of animation in ms, if enabled
        animationDuration: 500,
        // Easing of animation, if enabled
        animationEasing: undefined,
        // Fit the viewport to the repositioned nodes
        fit: true,
        // Padding around layout
        padding: 30,
        // Whether to include labels in node dimensions. Valid in "proof" quality
        nodeDimensionsIncludeLabels: true,
        // Whether or not simple nodes (non-compound nodes) are of uniform dimensions
        uniformNodeDimensions: false,
        // Whether to pack disconnected components - valid only if randomize: true
        packComponents: true,

        /* spectral layout options */

        // False for random, true for greedy sampling
        samplingType: true,
        // Sample size to construct distance matrix
        sampleSize: 25,
        // Separation amount between nodes
        nodeSeparation: 75,
        // Power iteration tolerance
        piTol: 0.0000001,

        /* incremental layout options */

        // Node repulsion (non overlapping) multiplier
        nodeRepulsion: 4500,
        // Ideal edge (non nested) length
        idealEdgeLength: 50,
        // Divisor to compute edge forces
        edgeElasticity: 0.45,
        // Nesting factor (multiplier) to compute ideal edge length for nested edges
        nestingFactor: 0.1,
        // Maximum number of iterations to perform
        numIter: 2500,
        // For enabling tiling
        tile: true,
        // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)
        tilingPaddingVertical: 10,
        // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)
        tilingPaddingHorizontal: 10,
        // Gravity force (constant)
        gravity: 0.25,
        // Gravity range (constant) for compounds
        gravityRangeCompound: 1.5,
        // Gravity force (constant) for compounds
        gravityCompound: 1.0,
        // Gravity range (constant)
        gravityRange: 3.8,
        // Initial cooling factor for incremental layout
        initialEnergyOnIncremental: 0.3,
    };

    // Create the DOM element used to draw the graph.
    let initialLayoutOptions = Object.assign({}, layoutOptions);
    initialLayoutOptions["randomize"] = true;
    const cy = cytoscape({
        container: document.getElementById('cy'),
        layout: initialLayoutOptions,
        style: [
            {
                selector: 'node',
                style: {
                    'label': 'data(label)',
                    'shape': 'rectangle',
                    'width': 'label',
                    'height': 'label',
                    'padding': '10px',
                    'text-valign': 'center',
                    'text-halign': 'center',
                    'background-color': '#EEEEEE',
                    'border-style': 'solid',
                    'border-width': 1,
                    'border-color': '#000000',
                }
            },
            {
                selector: 'node.resource',
                style: {
                    'shape': 'round-rectangle',
                },
            },
            {
                selector: 'node.var',
                style: {
                    'shape': 'ellipse',
                },
            },
            {
                selector: 'node.local',
                style: {
                    'shape': 'ellipse',
                },
            },
            {
                selector: 'node.output',
                style: {
                    'shape': 'cut-rectangle',
                },
            },
            {
                selector: 'node.module',
                style: {
                    'font-weight': 'bold',
                    'text-valign': 'top',
                    'text-halign': 'center',
                    'background-color': function (ele) {
                        let colorIndex = getColorIndex(ele);
                        return moduleBgColorPalette[colorIndex];
                    }
                }
            },
            {
                selector: 'node.provider',
                style: {
                    'shape': 'diamond',
                    'padding': '25px',
                },
            },
            {
                selector: "node.cy-expand-collapse-collapsed-node",
                style: {
                    'border-style': 'dashed'
                }
            },
            {
                selector: ':selected',
                style: {
                    "border-width": 2
                }
            },
            {
                selector: 'edge',
                style: {
                    'line-style': 'solid',
                    'width': 1,
                    'line-color': '#000000',
                    'source-arrow-color': '#000000',
                    'target-arrow-color': '#000000',
                    'target-arrow-shape': 'triangle',
                    'curve-style': 'bezier',
                }
            },
            {
                selector: 'edge[targetType = "var"], edge[targetType = "local"]',
                style: {
                    'line-style': 'dotted',
                }
            },
            {
                selector: 'edge[targetType = "output"]',
                style: {
                    'line-style': 'dashed',
                }
            },
            {
                selector: 'edge[sourceType = "module"][targetType = "module"]',
                style: {
                    'width': 2,
                    'source-arrow-shape': 'diamond',
                    'curve-style': 'straight',
                }
            },
            {
                selector: 'edge.cy-expand-collapse-meta-edge',
                style: {
                    'visibility': 'hidden'
                }
            },
        ],
        elements: {{.GraphElementsJSON}}
    });

    const expandCollapseApi = cy.expandCollapse({
        layoutBy: layoutOptions,
        fisheye: true,
        animate: false,
        undoable: false
    });

    document.getElementById("collapseAll").addEventListener("click", function () {
        expandCollapseApi.collapseAll();
    });

    document.getElementById("expandAll").addEventListener("click", function () {
        expandCollapseApi.expandAll();
    });

    document.getElementById("runLayout").addEventListener("click", function () {
        const layout = cy.layout(layoutOptions);
        layout.run();
    });
</script>
</body>
</html>
