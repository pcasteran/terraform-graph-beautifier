<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="description" content="Terraform configuration graph">
    <meta name="author" content="https://github.com/pcasteran/terraform-graph-beautifier">

    <title>{{.PageTitle}}</title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.15.0/cytoscape.min.js"
            integrity="sha256-GxVkCHwpfIWhzOsLbuoswprmQ15n+P5YZfFEf+Tjti8=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/cytoscape-cose-bilkent@4.0.0/cytoscape-cose-bilkent.js"></script>
</head>
<style>
    #cy {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0px;
        left: 0px;
    }
</style>
<body>
<div id="cy"></div>
<script>
    // Helper function used to retrieve the scratchpad data of an element.
    const getScratchPad = function (element) {
        let scratchPad = element.scratch('_tf-graph-beautifier');
        if (!scratchPad) {
            scratchPad = element.scratch('_tf-graph-beautifier', {});
        }
        return scratchPad;
    }

    // Color palette used for the modules background.
    //
    // This is the "8-class Pastel2" palette from ColorBrewer v2.0 (https://colorbrewer2.org/?type=qualitative&scheme=Pastel2&n=8).
    //
    // This palette is covered by a licence, hence here is the requested acknowledgments:
    // This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).
    // Please see license at http://colorbrewer.org/export/LICENSE.txt
    const moduleBgColorPalette = ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'];

    // Returns the color index in the `moduleBgColorPalette` for an element.
    const getColorIndex = function (element) {
        let scratchPad = getScratchPad(element);
        let colorIndex = scratchPad["module-bg-color-index"];
        if (colorIndex === undefined) {
            // Get the color index of the parent (if any).
            let parentId = element.data("parentModuleID");
            if (parentId) {
                let parent = element.cy().getElementById(parentId);
                let parentColorIndex = getColorIndex(parent);
                colorIndex = (parentColorIndex + 1) % moduleBgColorPalette.length;
            } else {
                colorIndex = 0;
            }

            scratchPad["module-bg-color-index"] = colorIndex;
        }

        return colorIndex
    }

    // Create the DOM element used to draw the graph.
    const cy = cytoscape({
        container: document.getElementById('cy'),
        layout: {
            name: 'cose-bilkent',
            // 'draft', 'default' or 'proof"
            // - 'draft' fast cooling rate
            // - 'default' moderate cooling rate
            // - "proof" slow cooling rate
            quality: 'default',
            // Whether to include labels in node dimensions. Useful for avoiding label overlap
            nodeDimensionsIncludeLabels: true,
            // number of ticks per frame; higher is faster but more jerky
            refresh: 30,
            // Whether to fit the network view after when done
            fit: true,
            // Padding on fit
            padding: 50,
            // Whether to enable incremental mode
            randomize: true,
            // Node repulsion (non overlapping) multiplier
            nodeRepulsion: 4500,
            // Ideal (intra-graph) edge length
            idealEdgeLength: 40,
            // Divisor to compute edge forces
            edgeElasticity: 0.45,
            // Nesting factor (multiplier) to compute ideal edge length for inter-graph edges
            nestingFactor: 0.1,
            // Gravity force (constant)
            gravity: 0.75,
            // Maximum number of iterations to perform
            numIter: 2500,
            // Whether to tile disconnected nodes
            tile: true,
            // Type of layout animation. The option set is {'during', 'end', false}
            animate: 'end',
            // Duration for animate:end
            animationDuration: 500,
            // Amount of vertical space to put between degree zero nodes during tiling (can also be a function)
            tilingPaddingVertical: 10,
            // Amount of horizontal space to put between degree zero nodes during tiling (can also be a function)
            tilingPaddingHorizontal: 10,
            // Gravity range (constant) for compounds
            gravityRangeCompound: 1.5,
            // Gravity force (constant) for compounds
            gravityCompound: 1.0,
            // Gravity range (constant)
            gravityRange: 3.8,
            // Initial cooling factor for incremental layout
            initialEnergyOnIncremental: 0.5
        },
        style: [
            {
                selector: 'node',
                style: {
                    'label': 'data(label)',
                    'shape': 'rectangle',
                    'width': 'label',
                    'height': 'label',
                    'padding': '10px',
                    'text-valign': 'center',
                    'text-halign': 'center',
                    'background-color': '#EEEEEE',
                    'border-style': 'solid',
                    'border-width': 1,
                    'border-color': '#000000',
                }
            },
            {
                selector: 'node.resource',
                style: {
                    'shape': 'round-rectangle',
                },
            },
            {
                selector: 'node.var',
                style: {
                    'shape': 'ellipse',
                },
            },
            {
                selector: 'node.local',
                style: {
                    'shape': 'ellipse',
                },
            },
            {
                selector: 'node.output',
                style: {
                    'shape': 'cut-rectangle',
                },
            },
            {
                selector: 'node.module',
                style: {
                    'font-weight': 'bold',
                    'text-valign': 'top',
                    'text-halign': 'center',
                    'background-color': function (ele) {
                        let colorIndex = getColorIndex(ele);
                        return moduleBgColorPalette[colorIndex];
                    },
                    'border-style': 'double',
                    'border-width': 1,
                    'border-color': '#000000',
                }
            },
            {
                selector: 'node.provider',
                style: {
                    'shape': 'diamond',
                    'padding': '25px',
                },
            },
            {
                selector: 'edge',
                style: {
                    'line-style': 'solid',
                    'width': 1,
                    'line-color': '#000000',
                    'source-arrow-color': '#000000',
                    'target-arrow-color': '#000000',
                    'target-arrow-shape': 'triangle',
                    'curve-style': 'bezier',
                }
            },
            {
                selector: 'edge[targetType = "var"], edge[targetType = "local"]',
                style: {
                    'line-style': 'dotted',
                }
            },
            {
                selector: 'edge[targetType = "output"]',
                style: {
                    'line-style': 'dashed',
                }
            },
            {
                selector: 'edge[sourceType = "module"][targetType = "module"]',
                style: {
                    'width': 2,
                    'source-arrow-shape': 'diamond',
                }
            }
        ],
        elements: {{.GraphElementsJSON}}
    });
</script>
</body>
</html>
